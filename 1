#define __LIBRARY__
#include <stdio.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <unistd.h>
#include <fcntl.h>

#define BUFFER_SIZE 20	/* 缓冲区数量 */
#define NUM 25			/* 产品总数 */

#define __NR_sem_open 87
#define __NR_sem_wait 88
#define __NR_sem_post 89
#define __NR_sem_unlink 90


#define __NR_shmget 91
#define __NR_shmat 92

typedef void sem_t;
_syscall2(int, shmget, int, key, int, size)
_syscall2(int, shmat, int, shmid, const void*, shmaddr)

_syscall2(int, sem_open, const char*, name, unsigned int, value)
_syscall1(int, sem_wait, sem_t*, sem)
_syscall1(int, sem_post, sem_t*, sem)
_syscall1(int, sem_unlink, const char*, name)


int main() {
	int shmid = shmget(0, 4096);
	int* p = (int*)shmat(shmid, NULL);

	sem_t* fire, * smoke, * Bcustomers, * Acustomers, * mutex;
	fire = (sem_t*)sem_open("fire", 0);
	smoke = (sem_t*)sem_open("smoke", 0);
	Acustomers = (sem_t*)sem_open("Acustomers", 0);
	Bcustomers = (sem_t*)sem_open("Bcustomers", 0);
	mutex = (sem_t*)sem_open("mutex", 1);

	*p = 0;
	if (!fork()) {
		int* x = (int*)shmat(shmid, NULL);
		
		while (1) {
			printf("customers%d",x);
			printf("A customer makes a request\n");
			sem_post(Bcustomers);
			sem_post(Acustomers);
			sem_wait(mutex);
			*x = *x + 1;
			sem_post(mutex);
			sem_wait(smoke);
			sem_wait(fire);
			

			sem_wait(mutex);
			*x = *x - 1;
			sem_post(mutex);
			printf("A customer service is completed\n");

			sleep(4);
		}
	}
	if (!fork()) {
		int* y = (int*)shmat(shmid, NULL);
	
		while (1) {
			printf("jia%d",y);
			sem_wait(mutex);
			if (*y == 0) {
				printf("waiter JIA sleep\n");
			}
			sem_post(mutex);
			sem_wait(Bcustomers);

			sem_post(smoke);
			printf("Waiter JIA offers a cigarette\n");

			sleep(rand() % 3 + 1);
		}
	}

	if (!fork()) {
		int* y = (int*)shmat(shmid, NULL);
		while (1) {

			sem_wait(mutex);
			if (*y == 0) {
				printf("waiter YI sleep\n");
			}
			sem_post(mutex);
			sem_wait(Acustomers);

			sem_post(fire);
			printf("Waiter YI finishes lighting a cigarette\n");

			sleep(rand() % 3 + 1);
		}
	}

	return 0;
}
